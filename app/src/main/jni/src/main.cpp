/*
 * Credits:
 *
 * Octowolve - Mod menu: https://github.com/z3r0Sec/Substrate-Template-With-Mod-Menu
 * And hooking: https://github.com/z3r0Sec/Substrate-Hooking-Example
 * VanHoevenTR A.K.A Nixi: https://github.com/LGLTeam/VanHoevenTR_Android_Mod_Menu
 * MrIkso - Mod menu: https://github.com/MrIkso/FloatingModMenu
 * Rprop - https://github.com/Rprop/And64InlineHook
 * MJx0 A.K.A Ruit - KittyMemory: https://github.com/MJx0/KittyMemory
 * */
#include <iostream>
#include <src/Includes/Utils.h>
#include "Hook.h"
#include "Includes/Logger.h"
#include "Includes/obfuscator.hpp"
#include "Canvas/ESP.h"
#include "Canvas/Bools.h"
#include "Canvas/StructsCommon.h"
ESP espOverlay;
#define CR_XD "XDarkYT"
#define HOOK(offset, ptr, orig) MSHookFunction((void *)getRealOffset(offset), (void *)ptr, (void **)&orig)
extern "C" {
JNIEXPORT jboolean JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_EnableSounds(
        JNIEnv *env,
        jobject activityObject) {
    return true;
}

JNIEXPORT jstring JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_Title(
        JNIEnv *env,
        jobject activityObject) {
    return env->NewStringUTF("");
}

JNIEXPORT jstring JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_Heading(
        JNIEnv *env,
        jobject activityObject) {
    //std::string
    return env->NewStringUTF("");
}

JNIEXPORT jstring JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_Icon(
        JNIEnv *env,
        jobject activityObject) {

    //Use https://www.base64encode.org/ to encode your image to base64

    std::string str = "";
	return env->NewStringUTF(str.c_str());
}


JNIEXPORT jstring JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_IconWebViewData(
        JNIEnv *env,
        jobject activityObject) {

    //Upload your image or gif on imgur.com or other sites
    //To disable it:
    //return NULL
    //It would load the base64 icon from above as usual

    //From internet: return env->NewStringUTF("https://i.imgur.com/SujJ85j.gif"); (Requires android.permission.INTERNET)
    //From assets folder: return env->NewStringUTF("file:///android_asset/example.gif"); (Requires android.permission.INTERNET)
    //Base64 html: return env->NewStringUTF("data:image/png;base64, <encoded base64 here>");
    //Nothing: return NULL
    return NULL;
}

JNIEXPORT jint JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_IconSize(
        JNIEnv *env,
        jobject activityObject) {
    return 70;
}

//Alerta Al Abrir El Icono//
JNIEXPORT jstring JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_Toast(
JNIEnv *env,
jclass clazz) {
return env->NewStringUTF("<b><font color=WHITE>GAME MOD BY </font></b><font color=RED><b>BAPAN FF</b></font>");
}


JNIEXPORT jobjectArray  JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_getFeatureList(
        JNIEnv *env,
        jobject activityObject) {
    jobjectArray ret;

    const char *features[] = {
            "Toggle_AIMBOT AUTO", // 0
            "Toggle_AUTO HEADSHOT", // 1
            "Toggle_AIM INVISIBLE", // 2
            "Toggle_AIM WHEN FIRE", // 3
            "Toggle_AIM WHEN AIM", // 4
            "Toggle_AIM WHEN CROUCH", // 5
            "SeekBarSpot_HEADSHOT PERCENT_0_3", // 6
            "SeekBar_AIM FOV_0_360", // 7
            "SeekBar_SENSTIVITY_0_5", // 8
            "Toggle_ESP LINES", // 9
            "Toggle_ESP LINE MATERIAL", // 10
            "Toggle_ESP DISTANCE", // 11
			"Toggle_ESP ALERT", // 12
			"Toggle_CROSSHAIR", // 11
            "Toggle_FAKE USER NAME", // 12
            "Toggle_CLEAR REPORT", // 13
            "Toggle_RESET GUEST", // 14
            "Toggle_WHITE BODIES", // 15
            "Toggle_REMOVE SCOPE", // 16
            "Toggle_MEDKIT RUNNING", // 17
            "SeekBar_RAIN BULLETS_0_5", // 18
            "SeekBar_SPEED RUNNING_0_5", // 19
            "Toggle_RAPID PUNCH 2X", // 20
            "Toggle_AIM + MOVEMENT", // 21
            "Toggle_TELEPORT KILL", // 22
            "Toggle_FLY HACK KILL", // 23
            "SeekBar_FLY HACK SPEED_0_20", // 24
            "Toggle_NIGHT SKY MODE", // 25
            "SeekBar_FAR VIEW CAMERA_0_5", // 26
            "Toggle_HD GRAPHICS", // 27
            "Toggle_WALLHACK V3", // 28
            "Toggle_FAST RELOADING", // 29
            "Toggle_REMOVE TREES V3", // 20
            "Toggle_REMOVE GRASS V3"}; // 31

    int Total_Feature = (sizeof features /
                         sizeof features[0]); //Now you dont have to manually update the number everytime;

    ret = (jobjectArray) env->NewObjectArray(Total_Feature, env->FindClass("java/lang/String"),
                                             env->NewStringUTF(""));
    int i;
    for (i = 0; i < Total_Feature; i++)
        env->SetObjectArrayElement(ret, i, env->NewStringUTF(features[i]));
    return (ret);
}

// fancy struct for patches for kittyMemory
struct My_Patches {
// let's assume we have patches for these functions for whatever game
    // like show in miniMap boolean function
    MemoryPatch Headshot, NightMod, MedKitRunning, MedKitRunning2, WhiteBody, WhiteBody2, modcorHd, NoScope, Socofast, TiroMovimento, WallPedra, WallPedra1, CameraView1, CameraView2, CameraView3, CameraView4, CameraView5, RainOfBullets1, RainOfBullets2, RainOfBullets3, RainOfBullets4, RainOfBullets5, SpeedHack1, SpeedHack2, SpeedHack3, SpeedHack4, SpeedHack5, Sensi1, Sensi2, Sensi3, Sensi4, Sensi5, Reloadfast, RemoveTrees, RemoveGrass;

} hexPatches;

bool feature0, feature1 = false, feature2 = false, feature3 = false, feature4 = false,  feature5 = false,  feature6 = false,  feature7 = false,  feature8 = false,  feature9 = false, feature10 = false, feature11 = false, feature12 = false;

struct {
    float Fov_Aim = 0.998f;
    float FovCount2 = 0.998f;
    float MxDis;
    float SpeedInt;
    bool aimScope = false, aimBotFov = false, aimTiro = false, hs100 = false, ghost = false, hs70 = false, aimAgachado = false, aimBody = false, aimbotauto = true, teleKill = false, Paraquedas = false, aimVisibilidade = false, AlertWorld = false, AlertAround = false, espLine = false, espDistance = false, espName = false, espNames = false, aimFire = false, espSkeleton = false, espCircle = false, espNear = false, isEspReady = false, closestEnemy = false, espFire = false, linha = false, fakeName = false, night = false, sameteams = false, hd = false, aimTeste = false, aimTeste1 = false, aimTeste3 = false, medKit = false, Gravity = false, UseFiring = false, UseScope = false, UseVisible = false, UseMxD = false, UseFOV = false;
    int semihs = 0, SpeedHack = 0, Sensi = 0, CameraView = 0, enemyCountAround = 0, botCountAround = 0, enemyCountWorld = 0, botCountWorld = 0, FovCount1, MxDis1;

} MT;


int semihs = 0;
bool aimbotauto = false;

bool isAuto = false;

bool isFiring = false;

bool isScope = false;

bool isSquat = false;

bool isAimLegit = false;

bool isVisible = false;

bool isFOV = false;

bool isSmooth = false;

bool UsarDistancia = false;

bool isDistance = false;

bool isPlayerName2 = false;

float Fov_Aim = 0.998f;
float Aim_Distance;
float Aim_Smooth;

int enemyCountAround = 0;
int botCountAround = 0;
int SWidth = 1920;
int SHeight = 1080;

bool isDrawLine2 = false;

bool isEspCount = false;

bool active = true;
bool launched = false;

JNIEXPORT void JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_Changes(
        JNIEnv *env,
        jobject activityObject,
        jint feature,
        jint Value) {

    __android_log_print(ANDROID_LOG_VERBOSE, "Mod Menu", "Feature: = %d", feature);
    __android_log_print(ANDROID_LOG_VERBOSE, "Mod Menu", "Value: = %d", Value);

    switch (feature) {

        case 0: // Button
            MT.hs100 = !MT.hs100;
            break;

        case 1: // Button
            MT.UseFiring = !MT.UseFiring;
            MT.UseFiring = !MT.UseFiring;
            MT.UseVisible = !MT.UseVisible;
            feature0 = !feature0;
           
            break;

        case 2: // Button
            MT.hs70 = !MT.hs70;
            break;

        case 3: // Button
            MT.aimFire = !MT.aimFire;
           
            break;

        case 4: // Button
            MT.aimScope = !MT.aimScope;
         
            break;

        case 5: // Button
            MT.aimAgachado = !MT.aimAgachado;
           
            break;

        case 6: // Headshot Percent
            if (Value == 0) {
                MT.hs100 = false;
                MT.hs70 = false;
                MT.aimBody = false;
            } else if (Value == 1) {
                MT.hs70 = false;
                MT.hs100 = false;
                MT.aimBody = !MT.aimBody;
                MT.aimBody = true;
            } else if (Value == 2) {
                MT.hs100 = false;
                MT.aimBody = false;
                MT.hs70 = !MT.hs70;
                MT.hs70 = true;
            } else if (Value == 2) {
                MT.hs70 = false;
                MT.aimBody = false;
                MT.hs100 = !MT.hs100;
                MT.hs100 = true;
            }
            break;

        case 7: // AimFov
            if (Value == 1) {
                MT.Fov_Aim = 1.0f - (0.0099f * (float) Value);
            }
            break;

        case 8: // Senstivity
            if (Value == 0) {
                hexPatches.Sensi1.Restore();
                hexPatches.Sensi2.Restore();
                hexPatches.Sensi3.Restore();
                hexPatches.Sensi4.Restore();
                hexPatches.Sensi5.Restore();
            } else if (Value == 1) {
                hexPatches.Sensi1.Modify();
            } else if (Value == 2) {
                hexPatches.Sensi2.Modify();
            } else if (Value == 3) {
                hexPatches.Sensi3.Modify();
            } else if (Value == 4) {
                hexPatches.Sensi4.Modify();
            } else if (Value == 5) {
                hexPatches.Sensi5.Modify();
            }
            break;

        case 9: // Button
            MT.espFire = !MT.espFire;
            break;

        case 10: // ESP LINES (MATERIAL)
			MT.linha = !MT.linha;
            break;
        case 11: // ESP NAMES
            MT.espNames = !MT.espNames;
            break;
		case 12: // ESP ALERT
            MT.AlertWorld = !MT.AlertWorld;
            break;
		case 13:
			isESP = !isESP;
			break;

        case 14: // Button
            MT.fakeName = !MT.fakeName;
            break;

        case 15: // Button
            remove("/storage/emulated/0/Android/data/com.dts.freefireth/files/reportnew.db");
            remove("/storage/emulated/0/Android/data/com.dts.freefireth/files/ymrtc_log.txt");
            break;

        case 16: // Button
                remove("/storage/emulated/0/com.garena.msdk/guest100067.dat");
            break;

        case 17: // Button
            feature2 = !feature2;
            if (feature2) {
                hexPatches.WhiteBody.Modify();
                hexPatches.WhiteBody2.Modify();
            } else {
                hexPatches.WhiteBody.Restore();
                hexPatches.WhiteBody2.Restore();
            }
            break;

        case 18: // Button
            feature3 = !feature3;
            if (feature3) {
                hexPatches.NoScope.Modify();
            } else {
                hexPatches.NoScope.Restore();
            }
            break;

        case 19: // Button
            feature4 = !feature4;
            if (feature4) {
                hexPatches.MedKitRunning.Modify();
                hexPatches.MedKitRunning2.Modify();
            } else {
                hexPatches.MedKitRunning.Restore();
                hexPatches.MedKitRunning2.Restore();
            }
            break;

        case 20: // CameraView
            if (Value == 0) {
                hexPatches.RainOfBullets1.Restore();
                hexPatches.RainOfBullets2.Restore();
                hexPatches.RainOfBullets3.Restore();
                hexPatches.RainOfBullets4.Restore();
                hexPatches.RainOfBullets5.Restore();
            } else if (Value == 1) {
                hexPatches.RainOfBullets1.Modify();
            } else if (Value == 2) {
                hexPatches.RainOfBullets2.Modify();
            } else if (Value == 3) {
                hexPatches.RainOfBullets3.Modify();
            } else if (Value == 4) {
                hexPatches.RainOfBullets4.Modify();
            } else if (Value == 5) {
                hexPatches.RainOfBullets5.Modify();
            }
            break;

        case 21: // SpeedHack
            if (Value == 0) {
                hexPatches.SpeedHack1.Restore();
                hexPatches.SpeedHack2.Restore();
                hexPatches.SpeedHack3.Restore();
                hexPatches.SpeedHack4.Restore();
                hexPatches.SpeedHack5.Restore();
            } else if (Value == 1) {
                hexPatches.SpeedHack1.Modify();
            } else if (Value == 2) {
                hexPatches.SpeedHack2.Modify();
            } else if (Value == 3) {
                hexPatches.SpeedHack3.Modify();
            } else if (Value == 4) {
                hexPatches.SpeedHack4.Modify();
            } else if (Value == 5) {
                hexPatches.SpeedHack5.Modify();
            }
            break;

        case 22: // Button
            feature5 = !feature5;
            if (feature5) {
                hexPatches.Socofast.Modify();
            } else {
                hexPatches.Socofast.Restore();
            }
            break;

        case 23: // Button
            feature6 = !feature6;
            if (feature6) {
                hexPatches.TiroMovimento.Modify();
            } else {
                hexPatches.TiroMovimento.Restore();
            }
            break;

        case 24: // Button
            MT.teleKill = !MT.teleKill;
            MT.ghost = !MT.ghost;
            break;

        case 25: // Button
            MT.Gravity = !MT.Gravity;
            break;

        case 26: // FlySpeed
            MT.SpeedInt = Value;
            break;

        case 27: // Button
            feature7 = !feature7;
            if (feature7) {
                hexPatches.NightMod.Modify();
            } else {
                hexPatches.NightMod.Restore();
            }
            break;

        case 28: // CameraView
            if (Value == 0) {
                hexPatches.CameraView1.Restore();
                hexPatches.CameraView2.Restore();
                hexPatches.CameraView3.Restore();
                hexPatches.CameraView4.Restore();
                hexPatches.CameraView5.Restore();
            } else if (Value == 1) {
                hexPatches.CameraView1.Modify();
            } else if (Value == 2) {
                hexPatches.CameraView2.Modify();
            } else if (Value == 3) {
                hexPatches.CameraView3.Modify();
            } else if (Value == 4) {
                hexPatches.CameraView4.Modify();
            } else if (Value == 5) {
                hexPatches.CameraView5.Modify();
            }
            break;

        case 29: // Button
            feature8 = !feature8;
            if (feature8) {
                hexPatches.modcorHd.Modify();
            } else {
                hexPatches.modcorHd.Restore();
            }
            break;

        case 30: // Button
            feature9 = !feature9;
            if (feature9) {
                hexPatches.WallPedra.Modify();
            } else {
                hexPatches.WallPedra.Restore();
            }
            break;

        case 31: // Button
            feature10 = !feature10;
            if (feature10) {
                hexPatches.Reloadfast.Modify();
            } else {
                hexPatches.Reloadfast.Restore();
            }
            break;

        case 32: // Button
            feature11 = !feature11;
            if (feature11) {
                hexPatches.RemoveTrees.Modify();
            } else {
                hexPatches.RemoveTrees.Restore();
            }
            break;

        case 33: // Button
            feature12 = !feature12;
            if (feature12) {
                hexPatches.RemoveGrass.Modify();
            } else {
                hexPatches.RemoveGrass.Restore();
            }
            break;
    }
  }
}

Vector3 GetHeadPosition(void* player){
    return Transform_INTERNAL_GetPosition(*(void**) ((uint64_t) player + 0x1B0)); // atualizado 1.56
}

Vector3 GetHipPosition(void* player){
    return Transform_INTERNAL_GetPosition(*(void**) ((uint64_t) player + 0x1B0)); // atualizado 1.56
}

struct EnemyData {
    Vector2 Localation;
    Vector2 HeadLocation;
    Vector3 Enemy;
    Vector3 Player;
    float Distance;
    float Distancee;
    string PlayerName;
};

struct Response {
    int PlayerCount;
    EnemyData Players[maxplayerCount];
} response;

bool isValidPlayer(EnemyData data){
    return (data.Localation != Vector2::Zero() && data.HeadLocation != Vector2::Zero());
}

void *playerlate = NULL;
void *get_Player(void *player) {
    playerlate = player;
    return playerlate;
}

void (*LateUpdate)(void *componentPlayer);
            void AimBot(void *local_player, void *enemy_player) {

                int pose = GetPhysXPose(enemy_player);
                bool alive = get_isAlive(enemy_player);
                bool visible = get_isVisible(enemy_player);
                bool visi = get_AttackableEntity_IsVisible(enemy_player);
                bool visir = get_AttackableEntity_GetIsDead(enemy_player);

                bool sameteam = get_isLocalTeam(enemy_player);
                void *HeadTF = *(void **)((uintptr_t)enemy_player + Global.HeadTF);
                void *HipTF = *(void **)((uintptr_t)enemy_player + Global.HipTF);
                void *Main_Camera = *(void **)((uintptr_t)local_player + Global.MainCameraTransform);

                if (alive && pose != 8 && visible && !sameteam && HeadTF != NULL && Main_Camera != NULL && HipTF != NULL) {
                    Vector3 EnemyLocation = Transform_INTERNAL_GetPosition(HeadTF);
                    Vector3 CenterWS = GetAttackableCenterWS(local_player);
                    bool scope = get_IsSighting(local_player);
                    bool agachado = get_IsCrouching(local_player);
                    float distance = Vector3::Distance(CenterWS, EnemyLocation);

                    Vector3 PlayerLocation = Transform_INTERNAL_GetPosition(Main_Camera);
                    Quaternion PlayerLook = GetRotationToLocation(EnemyLocation, 0.1f, PlayerLocation);
                    Quaternion PlayerLook2 = GetRotationToLocation(Transform_INTERNAL_GetPosition(HipTF), 0.1f, PlayerLocation);
                    Vector3 fwd = GetForward(Main_Camera);

                    Vector3 nrml = Vector3::Normalized(EnemyLocation - PlayerLocation);
                    float PlayerDot = Vector3::Dot(fwd, nrml);

                    if (MT.espFire) {
                        void *imo = get_imo(local_player);
                        if (imo != NULL && distance > 1.0f) {
                            set_esp(imo, CenterWS, EnemyLocation);
                        }
                    }
                    void* CurrentWP = get_imo(local_player);
                    if(MT.linha) {   
                    Vector3 From = Transform_INTERNAL_GetPosition(Component_GetTransform(Camera_main()));
                    Vector3 BodyZPos = GetHipPosition(local_player);
                    Vector3 From2 = From + Vector3(2.3,8,(BodyZPos.Z - From.Z));
                    Vector3 To = GetHeadPosition(enemy_player);
                    set_esp(CurrentWP,From2,To);    
                       
				        }
				    if (MT.AlertWorld) {
                    monoString *alert = FormatCount(MT.enemyCountWorld, MT.botCountWorld);
                    if (alert != NULL) {
                    ShowDynamicPopupMessage(alert);
                        }
                     }


                    if (MT.fakeName) {
                        spofNick(local_player);
                    }


                    if (MT.espNames) {
                        void *ui = CurrentUIScene();
                        if (ui != NULL) {
                            monoString *nick = get_NickName(enemy_player);
                            monoString *distances = U3DStrFormat(distance);
                            AddTeammateHud(ui, nick, distances);
                        }
                    }

                    if (MT.teleKill) {
                        void *_MountTF = Component_GetTransform(enemy_player);
                        if (_MountTF != NULL) {
                            Vector3 MountTF =
                                    Transform_INTERNAL_GetPosition(_MountTF) -
                                    (GetForward(_MountTF) * 1.6f);
                            Transform_INTERNAL_SetPosition(Component_GetTransform(local_player),
                                                           Vvector3(MountTF.X, MountTF.Y,
                                                                    MountTF.Z));
                        }
                    }

                    if ((agachado && MT.aimAgachado) && ((PlayerDot > 0.998f && !MT.aimBotFov) || (PlayerDot > MT.Fov_Aim && MT.aimBotFov))) {

                        set_aim(local_player, PlayerLook);
                    }


                    if ((scope && MT.aimScope) && ((PlayerDot > 0.998f && !MT.aimBotFov) || (PlayerDot > MT.Fov_Aim && MT.aimBotFov))) {
                        set_aim(local_player, PlayerLook);

                    }


                    bool firing = IsFiring(local_player);
                    if ((firing && MT.aimFire) && ((PlayerDot > 0.998f && !MT.aimBotFov) || (PlayerDot > MT.Fov_Aim && MT.aimBotFov))) {


                        if (MT.aimBody) {
                            set_aim(local_player, PlayerLook2);
                        }
                        if (MT.hs100) {
                            set_aim(local_player, PlayerLook);
                        }
                        if (MT.hs70) {
                            if (MT.aimbotauto)
                            {
                                set_aim(local_player, PlayerLook);
                                ++MT.semihs;
                            } else {
                                set_aim(local_player, PlayerLook2);
                                --MT.semihs;
                            }

                            if (MT.semihs == 6)
                            {
                                MT.aimbotauto = false;
                            } else if (MT.semihs == 0) {
                                MT.aimbotauto = true;
                            }
                            if (MT.semihs > 6 || MT.semihs < 0)
                            {
                                MT.semihs = 3;
                                MT.aimbotauto = true;
                            }
                        }
                        if(!MT.UseFOV && ((!MT.UseMxD) || (MT.UseMxD && distance < MT.MxDis)) && ((!MT.UseVisible) || (MT.UseVisible && get_isAlive))) {
                            if(feature0) {
                                set_aim(local_player, PlayerLook);
                            } else if(scope && MT.UseScope) {
                                set_aim(local_player, PlayerLook);
                            } else if (firing && MT.UseFiring)  {
                                set_aim(local_player, PlayerLook);
                            }
                        } else if(MT.UseFOV && PlayerDot > MT.FovCount2 && ((!MT.UseMxD) || (MT.UseMxD && distance < MT.MxDis)) && ((!MT.UseVisible) || (MT.UseVisible && get_isAlive))){
                            if(feature0) {
                                set_aim(local_player, PlayerLook);
                            } else if(scope && MT.UseScope) {
                                set_aim(local_player, PlayerLook);
                            } else if (firing && MT.UseFiring)  {
                                set_aim(local_player, PlayerLook);
                            }
                        }
                    }
                }
            }

                bool isEspReady = false;

                 void *fakeEnemy;
            void _LateUpdate(void *player){
                if (player != NULL) {
                    void *local_player = Current_Local_Player();
                    if (local_player == NULL){
                        local_player = GetLocalPlayerOrObServer();
                    }
                    if (local_player != NULL){
                        void *current_match = Curent_Match();
                        if (current_match != NULL) {
                            void *fakeCamPlayer = get_MyFollowCamera(local_player);
                            void *fakeCamEnemy = get_MyFollowCamera(player);
                            if (fakeCamPlayer != NULL && fakeCamEnemy != NULL){
                                void *fakeCamPlayerTF = Component_GetTransform(fakeCamPlayer);
                                void *fakeCamEnemyTF = Component_GetTransform(player);
                                if (fakeCamPlayerTF != NULL && fakeCamEnemyTF != NULL){
                                    Vector3 fakeCamPlayerPos = Transform_INTERNAL_GetPosition(fakeCamPlayerTF);
                                    Vector3 fakeCamEnemyPos = Transform_INTERNAL_GetPosition(fakeCamEnemyTF);
                                    float distance = Vector3::Distance(fakeCamPlayerPos, fakeCamEnemyPos);
                                    if (player != local_player){
                                        if (distance > 1.6f) {
                                            bool sameteams = get_isLocalTeam(player);
                                            int pose = GetPhysXPose(player);
                                            bool alive = get_isAlive(player);
                                            bool visible = get_isVisible(player);
                                            bool visir = get_AttackableEntity_GetIsDead(player);

                                            if (!sameteams && pose != 8 && alive && visible){
                                                AimBot(local_player, player);
                                            }
                                        } else {
                                            fakeEnemy = player;
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
                LateUpdate(player);
            }

int isOutsideSafezone(Vector2 pos, Vector2 screen) {
    Vector2 mSafezoneTopLeft(screen.X * 0.04f, screen.Y * 0.04f);
    Vector2 mSafezoneBottomRight(screen.X * 0.96f, screen.Y * 0.96f);

    int result = 0;
    if (pos.Y < mSafezoneTopLeft.Y) {
        result |= 1;
    }
    if (pos.X > mSafezoneBottomRight.X) {
        result |= 2;
    }
    if (pos.Y > mSafezoneBottomRight.Y) {
        result |= 4;
    }
    if (pos.X < mSafezoneTopLeft.X) {
        result |= 8;
    }
    return result;
}

Vector2 pushToScreenBorder(Vector2 Pos, Vector2 screen, int borders, int offset) {
    int X = (int) Pos.X;
    int Y = (int) Pos.Y;
    if ((borders & 1) == 1) {
        Y = 0 - offset;
    }
    if ((borders & 2) == 2) {
        X = (int) screen.X + offset;
    }
    if ((borders & 4) == 4) {
        Y = (int) screen.Y + offset;
    }
    if ((borders & 8) == 8) {
        X = 0 - offset;
    }
    return Vector2(X, Y);
}

//ESP espOverlay;

void DrawESP(ESP esp, int screenWidth, int screenHeight) {
    void *player = playerlate;
     

    if(isESP) { //Yeh Tho Crosshair Hai
        esp.DrawText(Color::Red(), "+", Vector2(screenWidth / 2, screenHeight / 1.9), 78);
    }

    int count = response.PlayerCount;

    if (count >= 1) {

        for (int i = 1; i < count; i++) {

            EnemyData player = response.Players[i];
            if(!isValidPlayer(player)){ continue; }

            Vector2 location = player.Localation;

            std::string dist;
            dist += "[ ";    
            dist += "M";
            dist += " ]";

            Vector2 screen(screenWidth, screenHeight);
            float mScale = screenHeight / (float) 1080;

            int borders = isOutsideSafezone(location, screen);


            char buffer360[10];
            float distance360 = Vector3::Distance(player.Enemy, player.Player);
            sprintf(buffer360, "%.f m", distance360);

            if (isPlayerLine) {
                esp.DrawLine(LineColorBranco, Linesize, Vector2((screenWidth / 2), 0),
                             player.HeadLocation);
            }

            if (isPlayerLine2) {
                esp.DrawLine(LineColorBranco, 2,
                             Vector2((screenWidth / 2), 0),
                             Vector2((screenWidth - (screenWidth - player.HeadLocation.X)),
                                     (screenHeight - player.HeadLocation.Y) - 10.0f));
            }
            if(isPlayerBox){
                Vector2 End = player.HeadLocation;
                float boxHeight = (screenWidth / player.Distance);
                float boxWidth = (screenHeight / player.Distance);
                Rect PlayerRect(End.X - (boxWidth / 2), End.Y, boxWidth, boxHeight);
                esp.DrawBox(Color::White(), 1, PlayerRect);
            }

            if(isPlayerDistance) {
                Vector2 End = player.HeadLocation;
                float boxHeight = (screenWidth / player.Distance);
                float boxWidth = (screenHeight / player.Distance);
                Rect PlayerRect(End.X - (boxWidth / 2), End.Y, boxWidth, boxHeight);
                esp.DrawText(Color::White(), dist.c_str(),
                             Vector2(PlayerRect.x + (PlayerRect.width / 2),
                                     PlayerRect.y + PlayerRect.height +
                                     12.5f), playerTextSize);
            }

            if (isPlayer360 && borders != 0) {
                Vector2 hintDotRenderPos = pushToScreenBorder(location, screen, borders,
                                                              (int) ((mScale * 100) / 3));
                Vector2 hintTextRenderPos = pushToScreenBorder(location, screen, borders,
                                                               -(int) ((mScale * 36)));
                esp.DrawFilledCircle((NULL ? Color(0, 255, 0, 128) : Color(255, 0, 0, 128)),
                                     hintDotRenderPos, (mScale * 120));
                esp.DrawText(Color::White(), buffer360, hintTextRenderPos, 23.0f);
            }
        }
    }
}

extern "C"
JNIEXPORT void JNICALL
Java_uk_lgl_modmenu_FloatingModMenuService_DrawOn(JNIEnv *env, jclass type, jobject espView, jobject canvas) {
    espOverlay = ESP(env, espView, canvas);
    if (espOverlay.isValid()){
        DrawESP(espOverlay, espOverlay.getWidth(), espOverlay.getHeight());
    }
}

bool (*orig_ghost)(void* _this, int value);
bool _ghost(void* _this, int value){
    if (_this != NULL){
        if (MT.ghost){
            return true;
        }
    }
    return orig_ghost(_this, value);
}

//Hooking For Rank Bypass
void(*initializeRank)(void* _this);
void _InitializeRank(void* _this) {
    if (_this != NULL) {
        return;
    }
    return initializeRank(_this);
}

//Hooking For Fly Hack
bool (*GravityTrue)(void* _this);
bool _GravityTrue(void* _this) {
    if (MT.Gravity) {
        return true;
    }
    return GravityTrue(_this);
}

float (*NegativeGravity)(int* _this);
float _NegativeGravity(int* _this) {
    if (NegativeGravity != NULL) {
        if (MT.Gravity) {
            return -500.0f;
        }
    }
    return NegativeGravity(_this);
}

void(*entermatch)(void* _this);
void _entermatch(void* _this){
    if (entermatch != NULL) {
        return;
    }
    return entermatch(_this);
}

void(*entermatch2)(void* _this);
void _entermatch2(void* _this){
    if (entermatch2 != NULL) {
        return;
    }
    return entermatch2(_this);
}

void(*entermatch3)(void* _this);
void _entermatch3(void* _this){
    if (entermatch3 != NULL) {
        return;
    }
    return entermatch3(_this);
}

void(*entermatch4)(void* _this);
void _entermatch4(void* _this){
    if (entermatch4 != NULL) {
        return;
    }
    return entermatch4(_this);
}

void *hack_thread(void *) {
    LOGI("Loading...");

    ProcMap il2cppMap;
    do {
        il2cppMap = KittyMemory::getLibraryMap("libil2cpp.so");
        sleep(1);
    } while (!il2cppMap.isValid());
    hexPatches.MedKitRunning = MemoryPatch("libil2cpp.so", 0x22F55A8, "\x00\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.MedKitRunning2 = MemoryPatch("libil2cpp.so", 0xB8929C, "\x00\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.WhiteBody = MemoryPatch("libil2cpp.so", 0xB6B77C, "\x01\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.WhiteBody2 = MemoryPatch("libil2cpp.so", 0x188BBE0, "\x00\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.modcorHd = MemoryPatch("libil2cpp.so", 0x2AAFBE8, "\x00\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.NoScope = MemoryPatch("libil2cpp.so", 0xB979E8, "\x00\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.modcorHd = MemoryPatch("libil2cpp.so", 0x2AAFBE8, "\x00\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.Socofast = MemoryPatch("libil2cpp.so", 0xC757E4, "\x8A\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.TiroMovimento = MemoryPatch("libil2cpp.so", 0xB8F7B4, "\x01\x00\xA0\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.CameraView1 = MemoryPatch("libil2cpp.so", 0xC700D0, "\x10\x00\x44\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.CameraView2 = MemoryPatch("libil2cpp.so", 0xC700D0, "\x32\x00\x44\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.CameraView3 = MemoryPatch("libil2cpp.so", 0xC700D0, "\x64\x00\x44\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.CameraView4 = MemoryPatch("libil2cpp.so", 0xC700D0, "\xC8\x00\x44\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.CameraView5 = MemoryPatch("libil2cpp.so", 0xC700D0, "\xFA\x00\x44\xE3\x1E\xFF\x2F\xE1", 8);
    hexPatches.Sensi1 = MemoryPatch("libil2cpp.so", 0xB8EB28, "\x00\x00\x96\x43", 4);
    hexPatches.Sensi2 = MemoryPatch("libil2cpp.so", 0xB8EB28, "\x00\x00\x7A\x43", 4);
    hexPatches.Sensi3 = MemoryPatch("libil2cpp.so", 0xB8EB28, "\x00\x00\x48\x43", 4);
    hexPatches.Sensi4 = MemoryPatch("libil2cpp.so", 0xB8EB28, "\x00\x00\x32\x43", 4);
    hexPatches.Sensi5 = MemoryPatch("libil2cpp.so", 0xB8EB28, "\x00\x00\x16\x43", 4);

    HOOK(0x113F15C, _InitializeRank, initializeRank); //private void OpenWaitingRoomEPRanking(Transform EPRoot)

    //Partidas rank
    MSHookFunction((void*)getRealOffset(0x16634FC), (void*)_entermatch, (void**)&entermatch); //public static bool IsPackageInstalled(string bundleIdentifier)
    MSHookFunction((void*)getRealOffset(0x16670C0), (void*)_entermatch, (void**)&entermatch); //public static bool CheckFileExists(string fileName)
    MSHookFunction((void*)getRealOffset(0x16E3DDC), (void*)_entermatch, (void**)&entermatch); //private static bool CheckPackageName(string packageName)
    MSHookFunction((void*)getRealOffset(0x278DDF0), (void*)_entermatch, (void**)&entermatch); //public static extern bool IsInstanceOf(IntPtr obj, IntPtr clazz);
    MSHookFunction((void*)getRealOffset(0x29B7C0C), (void*)_entermatch2, (void**)&entermatch2); //private void Update()
    MSHookFunction((void*)getRealOffset(0x25429B4), (void*)_entermatch3, (void**)&entermatch3); //public static void SetUserInfo(int entryId, [In] [Out] object openId);


    MSHookFunction((void*)getRealOffset(0xB89958), (void*)_LateUpdate, (void**)&LateUpdate);
    HOOK(0xBB30FC, _GravityTrue, GravityTrue);
    HOOK(0xB53204, _NegativeGravity, NegativeGravity);
    HOOK(0x1B8ACCC, _ghost, orig_ghost);
    return NULL;

}

void *Super_thread(void *) {
    LOGD("Loading...");

    ProcMap unityMap;
    do {
        unityMap = KittyMemory::getLibraryMap("libunity.so");
        sleep(1);
    } while (!unityMap.isValid());

    hexPatches.NightMod = MemoryPatch("libunity.so", 0x1A2290, "\x00\x00\x80\xBF", 4);

    return NULL;
}

JNIEXPORT jint JNICALL
JNI_OnLoad(JavaVM *vm, void *reserved) {
    JNIEnv *globalEnv;
    vm->GetEnv((void **) &globalEnv, JNI_VERSION_1_6);

    pthread_t ptid;
    pthread_create(&ptid, NULL, hack_thread, NULL);
    return JNI_VERSION_1_6;
}

JNIEXPORT void JNICALL
JNI_OnUnload(JavaVM *vm, void *reserved) {}


__attribute__((constructor))
void initializer() {
    pthread_t ptid;
    pthread_create(&ptid, NULL, Super_thread, NULL);
}
